
Spring Boot 与 Spring Security 集成，实现登录与权限管理；

Class SecurityConfig 继承 WebSecurityConfigurerAdapter , 为Spring Security的配置相关,详见注释;
注意点:
    1.http.csrf().disable() ban掉了csrf,以取消使用Spring Security内置的logout时因没传入csrf token而返回403的问题,
    但应该重写logout的RequestMapping,用post方法传token，安全性更高，留待改进(已完成)；
    2.http.antMatchers("/assets/**", "/loginresource/**").permitAll();取消了静态资源的拦截,否则login页面加载不到
    css等文件,登陆后又会直接下载相关文件;(重写configure(WebSecurity web)，web.ignoring().antMatchers("/assets/**", "/loginresource/**")效果相同)
    3.用户角色操作权限问题,目前使用方法注解@PreAuthorize("hasRole('admin')")成功,使用配置失败,后续继续尝试SecurityConfig
    中配置的方法,才能实现操作节点动态管理;
        后续：拦截请求的地址要写成"/chart/**"，真鸡儿坑！不过问题已解决；
    4.http.anyRequest().authenticated();每个请求都需要验证,字面上的意思;
    5.登录相关见注释;
    6.configureGlobal(AuthenticationManagerBuilder auth) 设置用户源,可内置,也可以使用数据库源.

Class SpitterUserService 实现 UserDetailsService, 用于为用户验证提供用户数据;
    主要实现loadUserByUsername 根据用户名查找对应权限;
    实体MUserDetails实现UserDetails,作为loadUserByUsername的返回值;


其它说明：
@EnableWebSecurity: 禁用Boot的默认Security配置，配合@Configuration启用自定义配置（需要扩展WebSecurityConfigurerAdapter）
@EnableGlobalMethodSecurity(prePostEnabled = true): 启用Security注解，例如最常用的@PreAuthorize
configure(HttpSecurity): Request层面的配置，对应XML Configuration中的<http>元素
configure(WebSecurity): Web层面的配置，一般用来配置无需安全检查的路径
configure(AuthenticationManagerBuilder): 身份验证配置，用于注入自定义身份验证Bean和密码校验规则
